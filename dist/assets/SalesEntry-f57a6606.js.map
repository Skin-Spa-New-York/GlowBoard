{"version":3,"file":"SalesEntry-f57a6606.js","sources":["../../src/utils/validation.ts","../../src/components/Sales/SalesForm.tsx","../../src/components/Sales/SalesTable.tsx","../../src/components/Sales/QuickActions.tsx","../../src/pages/SalesEntry.tsx"],"sourcesContent":["/**\n * Input validation and sanitization utilities\n */\n\nimport { Location, LOCATIONS } from \"@/types/entities\";\n\n// Validation rules\nexport const VALIDATION_RULES = {\n  SALES_AMOUNT: {\n    MIN: 0,\n    MAX: 1000000, // $1M max per day\n  },\n  TREATMENTS_COUNT: {\n    MIN: 0,\n    MAX: 1000, // 1000 treatments max per day\n  },\n  TEXT_LENGTH: {\n    TITLE_MAX: 100,\n    CONTENT_MAX: 2000,\n    NOTES_MAX: 500,\n  },\n} as const;\n\n// Validation error types\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n}\n\nexport class ValidationResult {\n  public isValid: boolean;\n  public errors: ValidationError[];\n  public sanitizedValue?: any;\n\n  constructor(\n    isValid: boolean,\n    errors: ValidationError[] = [],\n    sanitizedValue?: any\n  ) {\n    this.isValid = isValid;\n    this.errors = errors;\n    this.sanitizedValue = sanitizedValue;\n  }\n}\n\n// Sanitization functions\nexport const sanitize = {\n  /**\n   * Sanitize text input by removing potentially harmful characters\n   */\n  text: (input: string): string => {\n    if (typeof input !== \"string\") return \"\";\n\n    return input\n      .trim()\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\") // Remove script tags\n      .replace(/javascript:/gi, \"\") // Remove javascript: protocols\n      .replace(/on\\w+\\s*=/gi, \"\") // Remove event handlers\n      .slice(0, VALIDATION_RULES.TEXT_LENGTH.CONTENT_MAX); // Limit length\n  },\n\n  /**\n   * Sanitize numeric input\n   */\n  number: (input: any): number => {\n    const num = parseFloat(input);\n    return isNaN(num) ? 0 : num;\n  },\n\n  /**\n   * Sanitize email input\n   */\n  email: (input: string): string => {\n    if (typeof input !== \"string\") return \"\";\n    return input.trim().toLowerCase();\n  },\n};\n\n// Validation functions\nexport const validate = {\n  /**\n   * Validate sales amount\n   */\n  salesAmount: (amount: any): ValidationResult => {\n    const errors: ValidationError[] = [];\n    const sanitizedAmount = sanitize.number(amount);\n\n    if (sanitizedAmount < VALIDATION_RULES.SALES_AMOUNT.MIN) {\n      errors.push({\n        field: \"daily_sales\",\n        message: \"Sales amount cannot be negative\",\n        code: \"SALES_AMOUNT_TOO_LOW\",\n      });\n    }\n\n    if (sanitizedAmount > VALIDATION_RULES.SALES_AMOUNT.MAX) {\n      errors.push({\n        field: \"daily_sales\",\n        message: `Sales amount cannot exceed $${VALIDATION_RULES.SALES_AMOUNT.MAX.toLocaleString()}`,\n        code: \"SALES_AMOUNT_TOO_HIGH\",\n      });\n    }\n\n    return new ValidationResult(errors.length === 0, errors, sanitizedAmount);\n  },\n\n  /**\n   * Validate treatments count\n   */\n  treatmentsCount: (count: any): ValidationResult => {\n    const errors: ValidationError[] = [];\n    const sanitizedCount = sanitize.number(count);\n\n    if (sanitizedCount < VALIDATION_RULES.TREATMENTS_COUNT.MIN) {\n      errors.push({\n        field: \"treatments_count\",\n        message: \"Treatments count cannot be negative\",\n        code: \"TREATMENTS_COUNT_TOO_LOW\",\n      });\n    }\n\n    if (sanitizedCount > VALIDATION_RULES.TREATMENTS_COUNT.MAX) {\n      errors.push({\n        field: \"treatments_count\",\n        message: `Treatments count cannot exceed ${VALIDATION_RULES.TREATMENTS_COUNT.MAX}`,\n        code: \"TREATMENTS_COUNT_TOO_HIGH\",\n      });\n    }\n\n    return new ValidationResult(\n      errors.length === 0,\n      errors,\n      Math.floor(sanitizedCount)\n    );\n  },\n\n  /**\n   * Validate location\n   */\n  location: (location: any): ValidationResult => {\n    const errors: ValidationError[] = [];\n\n    if (!location || typeof location !== \"string\") {\n      errors.push({\n        field: \"location\",\n        message: \"Location is required\",\n        code: \"LOCATION_REQUIRED\",\n      });\n      return new ValidationResult(false, errors);\n    }\n\n    if (!LOCATIONS.includes(location as Location)) {\n      errors.push({\n        field: \"location\",\n        message: \"Invalid location selected\",\n        code: \"LOCATION_INVALID\",\n      });\n    }\n\n    return new ValidationResult(errors.length === 0, errors, location);\n  },\n\n  /**\n   * Validate date\n   */\n  date: (date: any): ValidationResult => {\n    const errors: ValidationError[] = [];\n\n    if (!date) {\n      errors.push({\n        field: \"date\",\n        message: \"Date is required\",\n        code: \"DATE_REQUIRED\",\n      });\n      return new ValidationResult(false, errors);\n    }\n\n    const dateObj = new Date(date);\n    if (isNaN(dateObj.getTime())) {\n      errors.push({\n        field: \"date\",\n        message: \"Invalid date format\",\n        code: \"DATE_INVALID\",\n      });\n      return new ValidationResult(false, errors);\n    }\n\n    // Check if date is not too far in the future (max 1 year)\n    const oneYearFromNow = new Date();\n    oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);\n\n    if (dateObj > oneYearFromNow) {\n      errors.push({\n        field: \"date\",\n        message: \"Date cannot be more than 1 year in the future\",\n        code: \"DATE_TOO_FUTURE\",\n      });\n    }\n\n    return new ValidationResult(\n      errors.length === 0,\n      errors,\n      dateObj.toISOString().split(\"T\")[0]\n    );\n  },\n\n  /**\n   * Validate text input\n   */\n  text: (\n    text: any,\n    maxLength: number = VALIDATION_RULES.TEXT_LENGTH.CONTENT_MAX\n  ): ValidationResult => {\n    const errors: ValidationError[] = [];\n\n    if (typeof text !== \"string\") {\n      return new ValidationResult(true, [], \"\");\n    }\n\n    const sanitizedText = sanitize.text(text);\n\n    if (sanitizedText.length > maxLength) {\n      errors.push({\n        field: \"text\",\n        message: `Text cannot exceed ${maxLength} characters`,\n        code: \"TEXT_TOO_LONG\",\n      });\n    }\n\n    return new ValidationResult(errors.length === 0, errors, sanitizedText);\n  },\n\n  /**\n   * Validate email\n   */\n  email: (email: any): ValidationResult => {\n    const errors: ValidationError[] = [];\n\n    if (!email || typeof email !== \"string\") {\n      errors.push({\n        field: \"email\",\n        message: \"Email is required\",\n        code: \"EMAIL_REQUIRED\",\n      });\n      return new ValidationResult(false, errors);\n    }\n\n    const sanitizedEmail = sanitize.email(email);\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    if (!emailRegex.test(sanitizedEmail)) {\n      errors.push({\n        field: \"email\",\n        message: \"Invalid email format\",\n        code: \"EMAIL_INVALID\",\n      });\n    }\n\n    return new ValidationResult(errors.length === 0, errors, sanitizedEmail);\n  },\n};\n\n/**\n * Validate sales record data\n */\nexport const validateSalesRecord = (data: any): ValidationResult => {\n  const errors: ValidationError[] = [];\n  const sanitizedData: any = {};\n\n  // Validate location\n  const locationResult = validate.location(data.location);\n  if (!locationResult.isValid) {\n    errors.push(...locationResult.errors);\n  } else {\n    sanitizedData.location = locationResult.sanitizedValue;\n  }\n\n  // Validate date\n  const dateResult = validate.date(data.date);\n  if (!dateResult.isValid) {\n    errors.push(...dateResult.errors);\n  } else {\n    sanitizedData.date = dateResult.sanitizedValue;\n  }\n\n  // Validate sales amount\n  const salesResult = validate.salesAmount(data.daily_sales);\n  if (!salesResult.isValid) {\n    errors.push(...salesResult.errors);\n  } else {\n    sanitizedData.daily_sales = salesResult.sanitizedValue;\n  }\n\n  // Validate treatments count (optional)\n  if (data.treatments_count !== undefined && data.treatments_count !== \"\") {\n    const treatmentsResult = validate.treatmentsCount(data.treatments_count);\n    if (!treatmentsResult.isValid) {\n      errors.push(...treatmentsResult.errors);\n    } else {\n      sanitizedData.treatments_count = treatmentsResult.sanitizedValue;\n    }\n  }\n\n  // Validate notes (optional)\n  if (data.notes) {\n    const notesResult = validate.text(\n      data.notes,\n      VALIDATION_RULES.TEXT_LENGTH.NOTES_MAX\n    );\n    if (!notesResult.isValid) {\n      errors.push(...notesResult.errors);\n    } else {\n      sanitizedData.notes = notesResult.sanitizedValue;\n    }\n  }\n\n  return new ValidationResult(errors.length === 0, errors, sanitizedData);\n};\n\n/**\n * Validate note data\n */\nexport const validateNote = (data: any): ValidationResult => {\n  const errors: ValidationError[] = [];\n  const sanitizedData: any = {};\n\n  // Validate location\n  const locationResult = validate.location(data.location);\n  if (!locationResult.isValid) {\n    errors.push(...locationResult.errors);\n  } else {\n    sanitizedData.location = locationResult.sanitizedValue;\n  }\n\n  // Validate title\n  const titleResult = validate.text(\n    data.title,\n    VALIDATION_RULES.TEXT_LENGTH.TITLE_MAX\n  );\n  if (!titleResult.isValid) {\n    errors.push(...titleResult.errors);\n  } else if (!titleResult.sanitizedValue?.trim()) {\n    errors.push({\n      field: \"title\",\n      message: \"Title is required\",\n      code: \"TITLE_REQUIRED\",\n    });\n  } else {\n    sanitizedData.title = titleResult.sanitizedValue;\n  }\n\n  // Validate content\n  const contentResult = validate.text(\n    data.content,\n    VALIDATION_RULES.TEXT_LENGTH.CONTENT_MAX\n  );\n  if (!contentResult.isValid) {\n    errors.push(...contentResult.errors);\n  } else if (!contentResult.sanitizedValue?.trim()) {\n    errors.push({\n      field: \"content\",\n      message: \"Content is required\",\n      code: \"CONTENT_REQUIRED\",\n    });\n  } else {\n    sanitizedData.content = contentResult.sanitizedValue;\n  }\n\n  // Validate priority\n  const validPriorities = [\"low\", \"medium\", \"high\"];\n  if (!validPriorities.includes(data.priority)) {\n    errors.push({\n      field: \"priority\",\n      message: \"Invalid priority level\",\n      code: \"PRIORITY_INVALID\",\n    });\n  } else {\n    sanitizedData.priority = data.priority;\n  }\n\n  // Validate visible_until (optional)\n  if (data.visible_until) {\n    const dateResult = validate.date(data.visible_until);\n    if (!dateResult.isValid) {\n      errors.push(...dateResult.errors);\n    } else {\n      sanitizedData.visible_until = dateResult.sanitizedValue;\n    }\n  }\n\n  return new ValidationResult(errors.length === 0, errors, sanitizedData);\n};\n","import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport type { SalesRecord, Location } from \"@/types/entities\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Save, X, AlertCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { validateSalesRecord, ValidationError } from \"@/utils/validation\";\nimport { logger } from \"@/utils/logger\";\n\nconst LOCATIONS = [\n  \"Flatiron\",\n  \"MidEast\",\n  \"Midtown\",\n  \"UWS\",\n  \"Back Bay\",\n  \"North Station\",\n  \"Miami Beach\",\n  \"eStore\",\n  \"Location 9\",\n  \"Location 10\",\n];\n\ninterface SalesFormProps {\n  record?: SalesRecord;\n  onSave: (recordData: Partial<SalesRecord>) => void;\n  onCancel: () => void;\n  isAdmin: boolean;\n  userLocation?: Location;\n}\n\nexport default function SalesForm({\n  record,\n  onSave,\n  onCancel,\n  isAdmin,\n  userLocation,\n}: SalesFormProps) {\n  const [formData, setFormData] = useState({\n    location:\n      record?.location ||\n      (isAdmin ? (\"\" as Location | \"\") : userLocation || \"Flatiron\"),\n    date: record?.date || format(new Date(), \"yyyy-MM-dd\"),\n    daily_sales: record?.daily_sales?.toString() || \"\",\n    treatments_count: record?.treatments_count?.toString() || \"\",\n    notes: record?.notes || \"\",\n  });\n\n  const [saving, setSaving] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<ValidationError[]>(\n    []\n  );\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setSaving(true);\n    setValidationErrors([]);\n\n    try {\n      // Validate the form data\n      const validationResult = validateSalesRecord({\n        location: formData.location,\n        date: formData.date,\n        daily_sales: formData.daily_sales,\n        treatments_count: formData.treatments_count,\n        notes: formData.notes,\n      });\n\n      if (!validationResult.isValid) {\n        setValidationErrors(validationResult.errors);\n        setSaving(false);\n        return;\n      }\n\n      // Use sanitized data from validation\n      await onSave(validationResult.sanitizedValue);\n\n      // Clear form on successful save\n      if (!record) {\n        setFormData({\n          location: isAdmin\n            ? (\"\" as Location | \"\")\n            : userLocation || \"Flatiron\",\n          date: format(new Date(), \"yyyy-MM-dd\"),\n          daily_sales: \"\",\n          treatments_count: \"\",\n          notes: \"\",\n        });\n      }\n    } catch (error) {\n      logger.error(\"Error submitting sales form\", error);\n      setValidationErrors([\n        {\n          field: \"general\",\n          message: \"An error occurred while saving. Please try again.\",\n          code: \"SAVE_ERROR\",\n        },\n      ]);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center gap-2\">\n          <Save className=\"w-5 h-5 text-[#bc9a64]\" />\n          {record ? \"Edit Sales Record\" : \"New Sales Entry\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {validationErrors.length > 0 && (\n          <Alert className=\"mb-6 border-red-500/20 bg-red-500/10\">\n            <AlertCircle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">\n              <div className=\"space-y-1\">\n                {validationErrors.map((error, index) => (\n                  <div key={index}>{error.message}</div>\n                ))}\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Location */}\n            {isAdmin && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium text-gray-300\">\n                  Location\n                </label>\n                <Select\n                  value={formData.location}\n                  onValueChange={(value) =>\n                    setFormData((prev) => ({\n                      ...prev,\n                      location: value as Location,\n                    }))\n                  }\n                >\n                  <SelectTrigger className=\"bg-[#0e0e0e] border-[#333] text-white\">\n                    <SelectValue placeholder=\"Select location\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n                    {LOCATIONS.map((location) => (\n                      <SelectItem\n                        key={location}\n                        value={location}\n                        className=\"text-white hover:bg-[#bc9a64]/10\"\n                      >\n                        {location}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Date */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">Date</label>\n              <Input\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) =>\n                  setFormData((prev) => ({ ...prev, date: e.target.value }))\n                }\n                className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n                required\n              />\n            </div>\n\n            {/* Daily Sales */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">\n                Daily Sales ($)\n              </label>\n              <Input\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                value={formData.daily_sales}\n                onChange={(e) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    daily_sales: e.target.value,\n                  }))\n                }\n                className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n\n            {/* Treatments Count */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">\n                Number of Treatments\n              </label>\n              <Input\n                type=\"number\"\n                min=\"0\"\n                value={formData.treatments_count}\n                onChange={(e) =>\n                  setFormData((prev) => ({\n                    ...prev,\n                    treatments_count: e.target.value,\n                  }))\n                }\n                className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">\n              Notes (Optional)\n            </label>\n            <Textarea\n              value={formData.notes}\n              onChange={(e) =>\n                setFormData((prev) => ({ ...prev, notes: e.target.value }))\n              }\n              className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64] h-24\"\n              placeholder=\"Add any notes about the day's performance...\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              className=\"border-[#333] text-gray-300 hover:bg-[#333]/50\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={saving || (!isAdmin && !userLocation)}\n              className=\"bg-gradient-to-r from-[#bc9a64] to-[#d4b876] hover:from-[#a8875a] hover:to-[#c1a56b] text-[#0e0e0e] font-semibold\"\n            >\n              {saving ? (\n                <div className=\"w-4 h-4 border-2 border-[#0e0e0e] border-t-transparent rounded-full animate-spin mr-2\" />\n              ) : (\n                <Save className=\"w-4 h-4 mr-2\" />\n              )}\n              {record ? \"Update\" : \"Save\"} Entry\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit, Trash2, Building2, DollarSign } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { SalesRecord } from \"@/types/entities\";\n\ninterface SalesTableProps {\n  records: SalesRecord[];\n  onEdit: (record: SalesRecord) => void;\n  onDelete: (recordId: string) => void;\n  showLocation?: boolean;\n}\n\nexport default function SalesTable({\n  records,\n  onEdit,\n  onDelete,\n  showLocation = false,\n}: SalesTableProps) {\n  const sortedRecords = [...records].sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n\n  if (records.length === 0) {\n    return (\n      <Card className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n        <CardContent className=\"p-12 text-center\">\n          <DollarSign className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-white mb-2\">\n            No Sales Records\n          </h3>\n          <p className=\"text-gray-400\">\n            No sales records found. Create your first entry using the form\n            above.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n      <CardHeader>\n        <CardTitle className=\"text-white\">\n          Sales Records ({records.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-[#bc9a64]/20\">\n                <th className=\"text-left py-3 px-4 text-gray-300 font-medium\">\n                  Date\n                </th>\n                {showLocation && (\n                  <th className=\"text-left py-3 px-4 text-gray-300 font-medium\">\n                    Location\n                  </th>\n                )}\n                <th className=\"text-right py-3 px-4 text-gray-300 font-medium\">\n                  Sales\n                </th>\n                <th className=\"text-right py-3 px-4 text-gray-300 font-medium\">\n                  Treatments\n                </th>\n                <th className=\"text-left py-3 px-4 text-gray-300 font-medium\">\n                  Notes\n                </th>\n                <th className=\"text-right py-3 px-4 text-gray-300 font-medium\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedRecords.map((record) => (\n                <tr\n                  key={record.id}\n                  className=\"border-b border-[#bc9a64]/10 hover:bg-[#bc9a64]/5 transition-colors\"\n                >\n                  <td className=\"py-4 px-4\">\n                    <div className=\"text-white font-medium\">\n                      {format(new Date(record.date), \"MMM d, yyyy\")}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">\n                      {format(new Date(record.date), \"EEEE\")}\n                    </div>\n                  </td>\n\n                  {showLocation && (\n                    <td className=\"py-4 px-4\">\n                      <Badge\n                        variant=\"outline\"\n                        className=\"text-gray-300 border-gray-600\"\n                      >\n                        <Building2 className=\"w-3 h-3 mr-1\" />\n                        {record.location}\n                      </Badge>\n                    </td>\n                  )}\n\n                  <td className=\"py-4 px-4 text-right\">\n                    <div className=\"text-white font-semibold\">\n                      ${record.daily_sales.toLocaleString()}\n                    </div>\n                  </td>\n\n                  <td className=\"py-4 px-4 text-right\">\n                    <div className=\"text-white\">\n                      {record.treatments_count || 0}\n                    </div>\n                  </td>\n\n                  <td className=\"py-4 px-4\">\n                    <div className=\"max-w-xs\">\n                      {record.notes ? (\n                        <p className=\"text-sm text-gray-300 truncate\">\n                          {record.notes}\n                        </p>\n                      ) : (\n                        <span className=\"text-gray-500 text-sm\">No notes</span>\n                      )}\n                    </div>\n                  </td>\n\n                  <td className=\"py-4 px-4\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onEdit(record)}\n                        className=\"text-gray-400 hover:text-[#bc9a64] hover:bg-[#bc9a64]/10\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onDelete(record.id!)}\n                        className=\"text-gray-400 hover:text-red-400 hover:bg-red-500/10\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Zap, Calendar, AlertCircle } from \"lucide-react\";\nimport { LOCATIONS } from \"@/types/entities\";\nimport { validateSalesRecord, ValidationError } from \"@/utils/validation\";\nimport { logger } from \"@/utils/logger\";\n\ninterface QuickActionsProps {\n  onQuickEntry: (data: {\n    daily_sales: number;\n    treatments_count?: number;\n    location?: string;\n  }) => void;\n  selectedDate: string;\n  onDateChange: (date: string) => void;\n  isAdmin?: boolean;\n}\n\nexport default function QuickActions({\n  onQuickEntry,\n  selectedDate,\n  onDateChange,\n  isAdmin,\n}: QuickActionsProps) {\n  const [quickSales, setQuickSales] = useState(\"\");\n  const [quickTreatments, setQuickTreatments] = useState(\"\");\n  const [quickLocation, setQuickLocation] = useState(\"\");\n  const [validationErrors, setValidationErrors] = useState<ValidationError[]>(\n    []\n  );\n\n  const handleQuickSubmit = () => {\n    setValidationErrors([]);\n\n    try {\n      // Validate the quick entry data\n      const validationResult = validateSalesRecord({\n        location: isAdmin ? quickLocation : undefined,\n        date: selectedDate,\n        daily_sales: quickSales,\n        treatments_count: quickTreatments,\n      });\n\n      if (!validationResult.isValid) {\n        setValidationErrors(validationResult.errors);\n        return;\n      }\n\n      // Use sanitized data from validation\n      const data = {\n        daily_sales: validationResult.sanitizedValue.daily_sales,\n        treatments_count: validationResult.sanitizedValue.treatments_count,\n        ...(isAdmin &&\n          quickLocation && {\n            location: validationResult.sanitizedValue.location || quickLocation,\n          }),\n      };\n\n      onQuickEntry(data);\n\n      // Reset form\n      setQuickSales(\"\");\n      setQuickTreatments(\"\");\n      setQuickLocation(\"\");\n      setValidationErrors([]);\n    } catch (error) {\n      logger.error(\"Error in quick entry\", error);\n      setValidationErrors([\n        {\n          field: \"general\",\n          message: \"An error occurred. Please try again.\",\n          code: \"QUICK_ENTRY_ERROR\",\n        },\n      ]);\n    }\n  };\n\n  return (\n    <Card className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center gap-2\">\n          <Zap className=\"w-5 h-5 text-[#bc9a64]\" />\n          Quick Entry\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {validationErrors.length > 0 && (\n          <Alert className=\"mb-4 border-red-500/20 bg-red-500/10\">\n            <AlertCircle className=\"h-4 w-4 text-red-400\" />\n            <AlertDescription className=\"text-red-300\">\n              <div className=\"space-y-1\">\n                {validationErrors.map((error, index) => (\n                  <div key={index}>{error.message}</div>\n                ))}\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-end\">\n          {/* Date Selection */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">Date</label>\n            <div className=\"relative\">\n              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => onDateChange(e.target.value)}\n                className=\"pl-10 bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n              />\n            </div>\n          </div>\n\n          {/* Location (Admin only) */}\n          {isAdmin && (\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-300\">\n                Location\n              </label>\n              <Select value={quickLocation} onValueChange={setQuickLocation}>\n                <SelectTrigger className=\"bg-[#0e0e0e] border-[#333] text-white\">\n                  <SelectValue placeholder=\"Select location\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-[#1a1a1a] border-[#bc9a64]/20\">\n                  {LOCATIONS.map((location) => (\n                    <SelectItem\n                      key={location}\n                      value={location}\n                      className=\"text-white hover:bg-[#bc9a64]/10\"\n                    >\n                      {location}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Sales Amount */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">\n              Sales ($)\n            </label>\n            <Input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={quickSales}\n              onChange={(e) => setQuickSales(e.target.value)}\n              className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n              placeholder=\"0.00\"\n            />\n          </div>\n\n          {/* Treatments Count */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-300\">\n              Treatments\n            </label>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              value={quickTreatments}\n              onChange={(e) => setQuickTreatments(e.target.value)}\n              className=\"bg-[#0e0e0e] border-[#333] text-white focus:border-[#bc9a64]\"\n              placeholder=\"0\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            onClick={handleQuickSubmit}\n            disabled={!quickSales || (isAdmin && !quickLocation)}\n            className=\"bg-gradient-to-r from-[#bc9a64] to-[#d4b876] hover:from-[#a8875a] hover:to-[#c1a56b] text-[#0e0e0e] font-semibold\"\n          >\n            <Zap className=\"w-4 h-4 mr-2\" />\n            Add Entry\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport type { SalesRecord } from \"@/types/entities\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSalesData } from \"@/hooks/useSalesData\";\nimport { AuditLogger } from \"@/components/Utils/AuditLogger\";\nimport { logger } from \"@/utils/logger\";\n\nimport SalesForm from \"@/components/Sales/SalesForm\";\nimport SalesTable from \"@/components/Sales/SalesTable\";\nimport QuickActions from \"@/components/Sales/QuickActions\";\n\nexport default function SalesEntry() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<SalesRecord | null>(null);\n  const [selectedDate, setSelectedDate] = useState(\n    format(new Date(), \"yyyy-MM-dd\")\n  );\n\n  const { user, loading: authLoading } = useAuth();\n  const {\n    salesData: salesRecords,\n    loading: dataLoading,\n    createSalesRecord,\n    updateSalesRecord,\n    deleteSalesRecord,\n  } = useSalesData({\n    userLocation: user?.location,\n    isAdmin: user?.is_admin,\n  });\n\n  const loading = authLoading || dataLoading;\n\n  const handleSaveRecord = async (recordData: Partial<SalesRecord>) => {\n    try {\n      if (editingRecord) {\n        // const oldData = { ...editingRecord };\n        await updateSalesRecord(editingRecord.id!, recordData);\n        // TODO: Implement audit logging when services are ready\n        // await AuditLogger.logSalesRecord(\"update\", editingRecord.id, oldData, recordData);\n      } else {\n        if (!user?.is_admin) {\n          recordData.location = user?.location || \"Flatiron\";\n        }\n        await createSalesRecord(\n          recordData as Omit<SalesRecord, \"id\" | \"created_at\" | \"updated_at\">\n        );\n        // TODO: Implement audit logging when services are ready\n        // await AuditLogger.logSalesRecord(\"create\", newRecord.id, null, recordData);\n      }\n\n      setShowForm(false);\n      setEditingRecord(null);\n    } catch (error) {\n      logger.error(\"Error saving sales record\", error);\n    }\n  };\n\n  const handleEditRecord = (record: SalesRecord) => {\n    setEditingRecord(record);\n    setShowForm(true);\n  };\n\n  const handleDeleteRecord = async (recordId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this record?\")) {\n      try {\n        const oldData = salesRecords.find((r) => r.id === recordId);\n        await deleteSalesRecord(recordId);\n        await AuditLogger.logSalesRecord(\"delete\", recordId, oldData, null);\n      } catch (error) {\n        logger.error(\"Error deleting sales record\", error);\n      }\n    }\n  };\n\n  const handleQuickEntry = async (quickData: any) => {\n    try {\n      const recordData = {\n        ...quickData,\n        location: user?.is_admin\n          ? quickData.location\n          : user?.location || \"Flatiron\",\n        date: selectedDate,\n      };\n      await createSalesRecord(recordData);\n      // TODO: Implement audit logging when services are ready\n      // await AuditLogger.logSalesRecord(\"create\", newRecord.id, null, recordData);\n    } catch (error) {\n      logger.error(\"Error with quick entry\", error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-[#0e0e0e] flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-2 border-[#bc9a64] border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#0e0e0e] text-white p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Sales Entry</h1>\n            <p className=\"text-gray-400\">\n              {user?.is_admin\n                ? \"Manage sales data for all locations\"\n                : `Manage sales for ${user?.location || \"your location\"}`}\n            </p>\n          </div>\n\n          <Button\n            onClick={() => setShowForm(true)}\n            className=\"bg-gradient-to-r from-[#bc9a64] to-[#d4b876] hover:from-[#a8875a] hover:to-[#c1a56b] text-[#0e0e0e] font-semibold\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            New Entry\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <QuickActions\n          onQuickEntry={handleQuickEntry}\n          selectedDate={selectedDate}\n          onDateChange={setSelectedDate}\n          isAdmin={user?.is_admin}\n        />\n\n        {/* Sales Form */}\n        {showForm && (\n          <SalesForm\n            record={editingRecord || undefined}\n            onSave={handleSaveRecord}\n            onCancel={() => {\n              setShowForm(false);\n              setEditingRecord(null);\n            }}\n            isAdmin={user?.is_admin || false}\n            userLocation={user?.location || \"Flatiron\"}\n          />\n        )}\n\n        {/* Sales Table */}\n        <SalesTable\n          records={salesRecords}\n          onEdit={handleEditRecord}\n          onDelete={handleDeleteRecord}\n          showLocation={user?.is_admin}\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":["VALIDATION_RULES","SALES_AMOUNT","MIN","MAX","TREATMENTS_COUNT","TEXT_LENGTH","TITLE_MAX","CONTENT_MAX","NOTES_MAX","ValidationResult","constructor","isValid","errors","sanitizedValue","__publicField","this","sanitize","input","trim","replace","slice","num","parseFloat","isNaN","validate","amount","sanitizedAmount","push","field","message","code","toLocaleString","length","count","sanitizedCount","Math","floor","location","LOCATIONS","includes","date","dateObj","Date","getTime","oneYearFromNow","setFullYear","getFullYear","toISOString","split","text","maxLength","sanitizedText","validateSalesRecord","data","sanitizedData","locationResult","dateResult","salesResult","daily_sales","treatments_count","treatmentsResult","notes","notesResult","SalesForm","record","onSave","onCancel","isAdmin","userLocation","formData","setFormData","useState","format","_a","toString","_b","saving","setSaving","validationErrors","setValidationErrors","jsxs","Card","className","children","jsx","CardHeader","CardTitle","Save","CardContent","Alert","AlertCircle","AlertDescription","map","error","index","onSubmit","async","e","preventDefault","validationResult","logger","jsxRuntimeExports","Select","value","onValueChange","prev","SelectTrigger","SelectValue","placeholder","SelectContent","SelectItem","Input","type","onChange","target","required","step","min","Textarea","Button","variant","onClick","X","disabled","SalesTable","records","onEdit","onDelete","showLocation","sortedRecords","sort","a","b","DollarSign","Badge","Building2","size","Edit","id","Trash2","QuickActions","onQuickEntry","selectedDate","onDateChange","quickSales","setQuickSales","quickTreatments","setQuickTreatments","quickLocation","setQuickLocation","Zap","Calendar","SalesEntry","showForm","setShowForm","editingRecord","setEditingRecord","setSelectedDate","user","loading","authLoading","useAuth","salesData","salesRecords","dataLoading","createSalesRecord","updateSalesRecord","deleteSalesRecord","useSalesData","is_admin","Plus","quickData","recordData","recordId","window","confirm","oldData","find","r","AuditLogger","logSalesRecord"],"mappings":"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"}