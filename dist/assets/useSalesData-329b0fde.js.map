{"version":3,"file":"useSalesData-329b0fde.js","sources":["../../src/utils/dateUtils.ts","../../src/utils/salesUtils.ts","../../src/hooks/useSalesData.ts"],"sourcesContent":["import {\n  format,\n  subDays,\n  startOfMonth,\n  endOfMonth,\n  subYears,\n  startOfYear,\n  endOfYear,\n  startOfQuarter,\n  endOfQuarter,\n  subWeeks,\n  subMonths,\n} from \"date-fns\";\n\nexport type TimeframeType =\n  | \"today\"\n  | \"7days\"\n  | \"30days\"\n  | \"4weeks\"\n  | \"month\"\n  | \"quarter\"\n  | \"halfyear\"\n  | \"year\"\n  | \"custom\";\n\nexport interface DateRange {\n  start: Date;\n  end: Date;\n  prevStart: Date;\n  prevEnd: Date;\n}\n\n/**\n * Get date range for a given timeframe with year-over-year comparison dates\n */\nexport function getDateRange(\n  timeframe: TimeframeType,\n  customStart?: Date,\n  customEnd?: Date\n): DateRange {\n  const today = new Date();\n\n  switch (timeframe) {\n    case \"today\":\n      return {\n        start: today,\n        end: today,\n        prevStart: subYears(today, 1),\n        prevEnd: subYears(today, 1),\n      };\n\n    case \"7days\":\n      return {\n        start: subDays(today, 6),\n        end: today,\n        prevStart: subDays(subYears(today, 1), 6),\n        prevEnd: subYears(today, 1),\n      };\n\n    case \"30days\":\n      return {\n        start: subDays(today, 29),\n        end: today,\n        prevStart: subDays(subYears(today, 1), 29),\n        prevEnd: subYears(today, 1),\n      };\n\n    case \"4weeks\":\n      return {\n        start: subWeeks(today, 4),\n        end: today,\n        prevStart: subWeeks(subYears(today, 1), 4),\n        prevEnd: subYears(today, 1),\n      };\n\n    case \"month\":\n      return {\n        start: startOfMonth(today),\n        end: endOfMonth(today),\n        prevStart: startOfMonth(subYears(today, 1)),\n        prevEnd: endOfMonth(subYears(today, 1)),\n      };\n\n    case \"quarter\":\n      return {\n        start: startOfQuarter(today),\n        end: endOfQuarter(today),\n        prevStart: startOfQuarter(subYears(today, 1)),\n        prevEnd: endOfQuarter(subYears(today, 1)),\n      };\n\n    case \"halfyear\":\n      return {\n        start: subMonths(today, 6),\n        end: today,\n        prevStart: subMonths(subYears(today, 1), 6),\n        prevEnd: subYears(today, 1),\n      };\n\n    case \"year\":\n      return {\n        start: startOfYear(today),\n        end: endOfYear(today),\n        prevStart: startOfYear(subYears(today, 1)),\n        prevEnd: endOfYear(subYears(today, 1)),\n      };\n\n    case \"custom\":\n      if (customStart && customEnd) {\n        const daysDiff = Math.ceil(\n          (customEnd.getTime() - customStart.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        return {\n          start: customStart,\n          end: customEnd,\n          prevStart: subDays(customStart, daysDiff + 365),\n          prevEnd: subDays(customEnd, 365),\n        };\n      }\n      // Fallback to 7 days if custom dates not provided\n      return getDateRange(\"7days\");\n\n    default:\n      return getDateRange(\"7days\");\n  }\n}\n\n/**\n * Check if a date falls within a date range\n */\nexport function isDateInRange(date: Date, start: Date, end: Date): boolean {\n  return date >= start && date <= end;\n}\n\n/**\n * Format date for display based on timeframe\n */\nexport function formatDateForTimeframe(\n  date: Date,\n  timeframe: TimeframeType\n): string {\n  switch (timeframe) {\n    case \"today\":\n    case \"7days\":\n    case \"30days\":\n      return format(date, \"MMM d\");\n    case \"4weeks\":\n      return `Week ${format(date, \"MMM d\")}`;\n    case \"month\":\n    case \"quarter\":\n    case \"halfyear\":\n    case \"year\":\n      return format(date, \"MMM yyyy\");\n    default:\n      return format(date, \"MMM d\");\n  }\n}\n\n/**\n * Get timeframe label for display\n */\nexport function getTimeframeLabel(timeframe: TimeframeType): string {\n  switch (timeframe) {\n    case \"today\":\n      return \"Today\";\n    case \"7days\":\n      return \"Last 7 Days\";\n    case \"30days\":\n      return \"Last 30 Days\";\n    case \"4weeks\":\n      return \"Last 4 Weeks\";\n    case \"month\":\n      return \"This Month\";\n    case \"quarter\":\n      return \"This Quarter\";\n    case \"halfyear\":\n      return \"Last 6 Months\";\n    case \"year\":\n      return \"This Year\";\n    case \"custom\":\n      return \"Custom Period\";\n    default:\n      return \"Current Period\";\n  }\n}\n","import type { SalesRecord } from \"@/types/entities\";\nimport { getDateRange, isDateInRange, type TimeframeType } from \"./dateUtils\";\n\nexport interface SalesStats {\n  todaySales: number;\n  yesterdaySales: number;\n  weekSales: number;\n  monthSales: number;\n  currentPeriodSales: number;\n  lastYearPeriodSales: number;\n  growth: number; // Day-over-day growth\n  yoyGrowth: number; // Year-over-year growth\n  totalTreatments: number;\n  avgDaily: number;\n  timeframeLabel: string;\n}\n\n/**\n * Calculate comprehensive sales statistics\n */\nexport function calculateSalesStats(\n  salesData: SalesRecord[],\n  timeframe: TimeframeType = \"7days\"\n): SalesStats {\n  const today = new Date();\n  const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);\n\n  // Get date ranges\n  const dateRange = getDateRange(timeframe);\n\n  // Daily stats\n  const todaySales = filterSalesByDate(salesData, today, today);\n  const yesterdaySales = filterSalesByDate(salesData, yesterday, yesterday);\n\n  // Week and month stats (preserved for existing functionality)\n  const weekStart = new Date(today.getTime() - 6 * 24 * 60 * 60 * 1000);\n  const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);\n  const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n\n  const weekSales = filterSalesByDate(salesData, weekStart, today);\n  const monthSales = filterSalesByDate(salesData, monthStart, monthEnd);\n\n  // Period-based stats for current and year-over-year comparison\n  const currentPeriodSales = filterSalesByDate(\n    salesData,\n    dateRange.start,\n    dateRange.end\n  );\n  const lastYearPeriodSales = filterSalesByDate(\n    salesData,\n    dateRange.prevStart,\n    dateRange.prevEnd\n  );\n\n  // Calculate growth rates\n  const growth =\n    yesterdaySales > 0\n      ? ((todaySales - yesterdaySales) / yesterdaySales) * 100\n      : 0;\n  const yoyGrowth =\n    lastYearPeriodSales !== 0\n      ? ((currentPeriodSales - lastYearPeriodSales) /\n          Math.abs(lastYearPeriodSales)) *\n        100\n      : currentPeriodSales > 0\n      ? Infinity\n      : 0;\n\n  // Other aggregate stats\n  const totalTreatments = salesData.reduce(\n    (sum, record) => sum + (record.treatments_count || 0),\n    0\n  );\n  const avgDaily =\n    salesData.length > 0\n      ? salesData.reduce((sum, record) => sum + record.daily_sales, 0) /\n        salesData.length\n      : 0;\n\n  return {\n    todaySales,\n    yesterdaySales,\n    weekSales,\n    monthSales,\n    currentPeriodSales,\n    lastYearPeriodSales,\n    growth,\n    yoyGrowth,\n    totalTreatments,\n    avgDaily,\n    timeframeLabel: getTimeframeLabel(timeframe),\n  };\n}\n\n/**\n * Filter sales records by date range and sum daily sales\n */\nfunction filterSalesByDate(\n  salesData: SalesRecord[],\n  startDate: Date,\n  endDate: Date\n): number {\n  return salesData\n    .filter((record) => {\n      const recordDate = new Date(record.date);\n      return isDateInRange(recordDate, startDate, endDate);\n    })\n    .reduce((sum, record) => sum + record.daily_sales, 0);\n}\n\n/**\n * Get timeframe label for display\n */\nfunction getTimeframeLabel(timeframe: TimeframeType): string {\n  switch (timeframe) {\n    case \"today\":\n      return \"Today\";\n    case \"7days\":\n      return \"Last 7 Days\";\n    case \"30days\":\n      return \"Last 30 Days\";\n    case \"4weeks\":\n      return \"Last 4 Weeks\";\n    case \"month\":\n      return \"This Month\";\n    case \"quarter\":\n      return \"This Quarter\";\n    case \"halfyear\":\n      return \"Last 6 Months\";\n    case \"year\":\n      return \"This Year\";\n    case \"custom\":\n      return \"Custom Period\";\n    default:\n      return \"Current Period\";\n  }\n}\n\n/**\n * Filter sales records by location\n */\nexport function filterSalesByLocation(\n  salesData: SalesRecord[],\n  location: string,\n  userLocation?: string,\n  isAdmin: boolean = false\n): SalesRecord[] {\n  if (location === \"all\" && isAdmin) {\n    return salesData;\n  }\n\n  const targetLocation = location !== \"all\" ? location : userLocation;\n  return salesData.filter((record) => record.location === targetLocation);\n}\n","import { useState, useEffect } from \"react\";\nimport type { SalesRecord } from \"@/types/entities\";\nimport { SalesRecordEntity } from \"@/services/entities\";\nimport {\n  filterSalesByLocation,\n  calculateSalesStats,\n  type SalesStats,\n} from \"@/utils/salesUtils\";\nimport type { TimeframeType } from \"@/utils/dateUtils\";\n\ninterface UseSalesDataOptions {\n  selectedLocation?: string;\n  userLocation?: string;\n  isAdmin?: boolean;\n  timeframe?: TimeframeType;\n}\n\nexport function useSalesData(options: UseSalesDataOptions = {}) {\n  const {\n    selectedLocation = \"all\",\n    userLocation,\n    isAdmin = false,\n    timeframe = \"7days\",\n  } = options;\n\n  const [salesData, setSalesData] = useState<SalesRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadSalesData();\n  }, [selectedLocation]);\n\n  const loadSalesData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const allSales = await SalesRecordEntity.list();\n      const filteredSales = filterSalesByLocation(\n        allSales,\n        selectedLocation,\n        userLocation,\n        isAdmin\n      );\n      setSalesData(filteredSales);\n    } catch (err) {\n      setError(\n        err instanceof Error ? err.message : \"Failed to load sales data\"\n      );\n      setSalesData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const stats: SalesStats = calculateSalesStats(salesData, timeframe);\n\n  const createSalesRecord = async (\n    data: Omit<SalesRecord, \"id\" | \"created_at\" | \"updated_at\">\n  ) => {\n    try {\n      await SalesRecordEntity.create(data);\n      await loadSalesData(); // Refresh data\n    } catch (err) {\n      throw new Error(\n        err instanceof Error ? err.message : \"Failed to create sales record\"\n      );\n    }\n  };\n\n  const updateSalesRecord = async (id: string, data: Partial<SalesRecord>) => {\n    try {\n      await SalesRecordEntity.update(id, data);\n      await loadSalesData(); // Refresh data\n    } catch (err) {\n      throw new Error(\n        err instanceof Error ? err.message : \"Failed to update sales record\"\n      );\n    }\n  };\n\n  const deleteSalesRecord = async (id: string) => {\n    try {\n      await SalesRecordEntity.delete(id);\n      await loadSalesData(); // Refresh data\n    } catch (err) {\n      throw new Error(\n        err instanceof Error ? err.message : \"Failed to delete sales record\"\n      );\n    }\n  };\n\n  return {\n    salesData,\n    stats,\n    loading,\n    error,\n    refetch: loadSalesData,\n    createSalesRecord,\n    updateSalesRecord,\n    deleteSalesRecord,\n  };\n}\n"],"names":["getDateRange","timeframe","customStart","customEnd","today","Date","start","end","prevStart","subYears","prevEnd","subDays","subWeeks","startOfMonth","endOfMonth","startOfQuarter","endOfQuarter","subMonths","startOfYear","endOfYear","daysDiff","Math","ceil","getTime","calculateSalesStats","salesData","yesterday","dateRange","todaySales","filterSalesByDate","yesterdaySales","weekStart","monthStart","getFullYear","getMonth","monthEnd","weekSales","monthSales","currentPeriodSales","lastYearPeriodSales","growth","yoyGrowth","abs","Infinity","totalTreatments","reduce","sum","record","treatments_count","avgDaily","length","daily_sales","timeframeLabel","getTimeframeLabel","startDate","endDate","filter","recordDate","date","useSalesData","options","selectedLocation","userLocation","isAdmin","setSalesData","useState","loading","setLoading","error","setError","useEffect","loadSalesData","async","filteredSales","location","targetLocation","filterSalesByLocation","SalesRecordEntity","list","err","Error","message","stats","refetch","createSalesRecord","data","create","updateSalesRecord","id","update","deleteSalesRecord","delete"],"mappings":"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"}